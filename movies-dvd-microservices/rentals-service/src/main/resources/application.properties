spring.application.name=rentals-service
spring.datasource.url=jdbc:mysql://localhost:3036/rentals_service
spring.datasource.username=root
spring.datasource.password=mysql
#spring.datasource.url=jdbc:mysql://localhost:3306/movies
#spring.datasource.username=movies
#spring.datasource.password=movies
inventory.url=http://localhost:8084
customer.Url = http://localhost:8082

spring.jpa.hibernate.ddl-auto=update
server.port=8085

eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.prefer-ip-address=true

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilience4j Properties
resilience4j.circuitbreaker.instances.getCustomer.register-health-indicator=true
resilience4j.circuitbreaker.instances.getCustomer.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.getCustomer.sliding-window-size=10
resilience4j.circuitbreaker.instances.getCustomer.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.getCustomer.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.getCustomer.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.getCustomer.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.getCustomer.minimum-number-of-calls =5

resilience4j.circuitbreaker.instances.inventory.register-health-indicator=true
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=10
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls =5

resilience4j.timelimiter.instances.userRegister.timeout-duration=3s
resilience4j.retry.instances.userRegister.max-attempts=3
resilience4j.retry.instances.userRegister.wait-duration = 2s

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=rental-placed
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

#schema-registry run on docker container at port 8086:8081
spring.kafka.producer.properties.schema.registry.url=http://localhost:8086


management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=rentals-service
management.tracing.sampling.probability=1.0
loki.url=http://localhost:3100/loki/api/v1/push