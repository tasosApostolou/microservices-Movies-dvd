spring.application.name=notification-service
server.port=8008
spring.kafka.bootstrap-servers=localhost:9092
#spring.kafka.template.default-topic=order-placed
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.orderservice.event
#spring.kafka.consumer.properties.spring.json.type.mapping=event:com.example.notificationservice.order.OrderPlacedEvent
spring.kafka.consumer.group-id=notificationService


spring.kafka.template.default-topic=customer-placed

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer


#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

#spring.kafka.consumer.properties.spring.json.type.mapping=event:com.example.moviesdvdmicroservices.order.CustomerPlacedEvent
#spring.kafka.consumer.properties.spring.json.type.mapping=event:com.example.moviesdvdmicroservices.order.CustomerEvent

spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
#schema-registry runs on a docker container at port 8086:8081 the same port where is the producer properties correct
spring.kafka.consumer.properties.schema.registry.url=http://localhost:8086
spring.kafka.consumer.properties.specific.avro.reader=true


spring.mail.host=sandbox.smtp.mailtrap.io
spring.mail.port=2525
spring.mail.username=21e8453975224a
spring.mail.password=933e30bbaaa5d1



#management.endpoints.web.exposure.include=health, info, metrics, prometheus
#management.metrics.distribution.percentiles-histogram.http.server.requests=true
#management.observations.key-values.application=product-service
#management.tracing.sampling.probability=1.0